{"version":3,"file":"static/js/44.0dca7469.chunk.js","mappings":"mIAEA,IAFe,kC,oICuGf,EAjGc,WAAO,IAAD,IACZA,GAAWC,EAAAA,EAAAA,MACXC,GAAmBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KACxD,GAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAwBJ,EAAAA,EAAAA,UAAS,IAAjC,eAAOK,EAAP,KAAaC,EAAb,KACA,GAA0BN,EAAAA,EAAAA,UAAS,IAAnC,eAAOO,EAAP,KAAcC,EAAd,KACA,GAAgCR,EAAAA,EAAAA,UAAS,IAAzC,eAAOS,EAAP,KAAiBC,EAAjB,KACA,GAA4BV,EAAAA,EAAAA,UAAS,IAArC,eAAOW,EAAP,KAAeC,EAAf,KACA,GAAsCZ,EAAAA,EAAAA,WAAS,GAA/C,eAAOa,EAAP,KAAoBC,EAApB,KACA,GAAoBd,EAAAA,EAAAA,UAAS,IAA7B,eAAOe,EAAP,KAAWC,EAAX,KACMC,GAAQC,EAAAA,EAAAA,MA4Bd,OA1BAC,EAAAA,EAAAA,YAAU,WACRC,MAAM,sCAAD,OACmCH,EAAMI,QADzC,mCAC2EC,EAAAA,IAE7EC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAb,IACbF,MAAK,SAAAG,GAEJ,GADAC,QAAQC,IAAI,aAAcF,GACtBA,EAAKvB,MAAO,CACdW,GAAe,GACfZ,EAAcwB,EAAKG,aACnBzB,EAASsB,EAAKvB,OACd,IAAM2B,EAAO,IAAIC,KAAKL,EAAKM,cAC3B1B,EAAQwB,EAAKG,eACbzB,EAAS0B,KAAKC,MAA0B,GAApBT,EAAKU,eACzB1B,EAAYgB,EAAKjB,UACjBG,EAAUc,EAAKf,QACfK,EAAMU,EAAKX,GACZ,MACCD,GAAe,EAElB,IACAuB,OAAM,SAAAC,GACLX,QAAQC,IAAR,yCAA8CX,EAAMI,SAAWiB,EAChE,GACJ,GAAE,CAACrB,EAAMI,WAGR,iBAAKkB,UAAWC,EAAAA,EAAAA,UAAhB,WACE,SAAC,KAAD,CAAMC,GAAI7C,EAAiB8C,QAA3B,UACE,mBAAQC,KAAK,SAAb,oCAED9B,GACC,iBAAK0B,UAAWC,EAAAA,EAAAA,MAAhB,WACE,gBAAKD,UAAWC,EAAAA,EAAAA,OAAhB,UACE,gBACEI,IACE3C,EAAU,yCAC4BA,G,igaAGxC4C,IAAI,oBAIR,iBAAKN,UAAWC,EAAAA,EAAAA,aAAhB,WACE,0BACGrC,EADH,KACYE,EADZ,QAGA,wCAAgBE,EAAhB,QACA,sCACA,uBAAIE,KACJ,oCACA,eAAI8B,UAAWC,EAAAA,EAAAA,OAAf,SACG7B,EAAOmC,KAAI,SAAAC,GAAK,OACf,yBACE,uBAAIA,EAAMC,QADHD,EAAMhC,GADA,UAOrB,sBAGF,gBAAKwB,UAAWC,EAAAA,EAAAA,MAAhB,UACE,iFAGJ,qDACA,gBAAID,UAAWC,EAAAA,EAAAA,SAAf,WACE,eAAID,UAAWC,EAAAA,EAAAA,KAAf,UACE,SAAC,KAAD,CAAMC,GAAG,OAAT,qBAEF,eAAIF,UAAWC,EAAAA,EAAAA,KAAf,UACE,SAAC,KAAD,CAAMC,GAAG,UAAT,2BAIJ,SAAC,EAAAQ,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,CAAQC,QAAS,CAACpC,EAAIC,SAI7B,C","sources":["components/API_KEY.js","pages/MovieDetails.js"],"sourcesContent":["const APIKEY = 'b3e9d29fd7300ce6955a9032d5811af1';\n\nexport default APIKEY;\n","import css from '../components/styles.module.css';\nimport { useParams, Link, Outlet, useLocation } from 'react-router-dom';\nimport { useRef, useState, useEffect, Suspense } from 'react';\nimport ImagePlaceholder from '../images//placeholder.png';\nimport APIKEY from '../components/API_KEY';\n\nconst Movie = () => {\n  const location = useLocation();\n  const backLinkLocation = useRef(location.state?.from ?? '/');\n  const [posterPath, setPosterPath] = useState('');\n  const [title, setTitle] = useState('');\n  const [year, setYear] = useState('');\n  const [score, setScore] = useState('');\n  const [overview, setOverview] = useState('');\n  const [genres, setGenres] = useState([]);\n  const [isAvailable, setIsAvailable] = useState(true);\n  const [id, setId] = useState('');\n  const movie = useParams();\n\n  useEffect(() => {\n    fetch(\n      `https://api.themoviedb.org/3/movie/${movie.movieId}?language=en-US&api_key=${APIKEY}`\n    )\n      .then(response => response.json())\n      .then(data => {\n        console.log('movie data', data);\n        if (data.title) {\n          setIsAvailable(true);\n          setPosterPath(data.poster_path);\n          setTitle(data.title);\n          const date = new Date(data.release_date);\n          setYear(date.getFullYear());\n          setScore(Math.floor(data.vote_average * 10));\n          setOverview(data.overview);\n          setGenres(data.genres);\n          setId(data.id);\n        } else {\n          setIsAvailable(false);\n        }\n      })\n      .catch(error => {\n        console.log(`Error on fetch request with ID ${movie.movieId}`, error);\n      });\n  }, [movie.movieId]);\n\n  return (\n    <div className={css.container}>\n      <Link to={backLinkLocation.current}>\n        <button type=\"button\">ðŸ¡¸ Go back</button>\n      </Link>\n      {isAvailable ? (\n        <div className={css.movie}>\n          <div className={css.poster}>\n            <img\n              src={\n                posterPath\n                  ? `https://image.tmdb.org/t/p/w300${posterPath}`\n                  : ImagePlaceholder\n              }\n              alt=\"Movie poster\"\n            />\n          </div>\n\n          <div className={css.movieDetails}>\n            <h2>\n              {title} ({year})\n            </h2>\n            <p>User Score: {score}%</p>\n            <h3>Overview</h3>\n            <p>{overview}</p>\n            <h3>Genres</h3>\n            <ul className={css.genres}>\n              {genres.map(genre => (\n                <li key={genre.id}>\n                  <p>{genre.name}</p>\n                </li>\n              ))}\n            </ul>\n          </div>\n          <br />\n        </div>\n      ) : (\n        <div className={css.movie}>\n          <h1>Sorry, we have no information about this movie...</h1>\n        </div>\n      )}\n      <h3>Additional information:</h3>\n      <ul className={css.infoList}>\n        <li className={css.info}>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li className={css.info}>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </ul>\n\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet context={[id, setId]} />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default Movie;\n"],"names":["location","useLocation","backLinkLocation","useRef","state","from","useState","posterPath","setPosterPath","title","setTitle","year","setYear","score","setScore","overview","setOverview","genres","setGenres","isAvailable","setIsAvailable","id","setId","movie","useParams","useEffect","fetch","movieId","APIKEY","then","response","json","data","console","log","poster_path","date","Date","release_date","getFullYear","Math","floor","vote_average","catch","error","className","css","to","current","type","src","alt","map","genre","name","Suspense","fallback","context"],"sourceRoot":""}